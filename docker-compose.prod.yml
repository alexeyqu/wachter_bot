version: "3.9"

services:
  wachterbot-prod:
    container_name: wachterbot-prod
    image: ghcr.io/alexeyqu/wachter_bot/wachterbot:prod
    environment:
      - TELEGRAM_TOKEN=${TELEGRAM_TOKEN}
      - UPTRACE_DSN=${UPTRACE_DSN}
      - TELEGRAM_ERROR_CHAT_ID=${TELEGRAM_ERROR_CHAT_ID}
      - DATABASE_URL=${DATABASE_URL}
      - PERSISTENCE_DATABASE_URL=${PERSISTENCE_DATABASE_URL}
      - DEBUG=${DEBUG}
      - DEPLOYMENT_ENVIRONMENT=production
      - TEAM_TELEGRAM_IDS=${TEAM_TELEGRAM_IDS}
    restart: unless-stopped

  postgres-prod:
    image: postgres:alpine
    restart: always
    ports:
      - 5435:5432
    environment:
      POSTGRES_DB: db
      POSTGRES_HOST: postgres-prod
      POSTGRES_USER: ${DATABASE_USER}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
    volumes:
      - volume-db:/data/db
      - postgres-data:/var/lib/postgresql/data
      - ./backup/db.sql:/docker-entrypoint-initdb.d/backupfile.sql
    healthcheck:
      test: pg_isready -U ${DATABASE_USER} -d db
      interval: 5s
      timeout: 2s
      retries: 3

  postgres-persistence-prod:
    image: postgres:alpine
    restart: always
    ports:
      - 5436:5432
    environment:
      POSTGRES_DB: persistence-db
      POSTGRES_HOST: postgres-persistence-prod
      POSTGRES_USER: ${PERSISTENCE_DATABASE_USER}
      POSTGRES_PASSWORD: ${PERSISTENCE_DATABASE_PASSWORD}
    volumes:
      - volume-persistence-db:/data/db
      - postgres-persistence-data:/var/lib/postgresql/data
      - ./backup/db-persistence.sql:/docker-entrypoint-initdb.d/backupfile.sql
    healthcheck:
      test: pg_isready -U ${PERSISTENCE_DATABASE_USER} -d persistence-db
      interval: 5s
      timeout: 2s
      retries: 3

volumes:
  volume-db:
  postgres-data:
  volume-persistence-db:
  postgres-persistence-data:

networks:
  default:
    name: network-wachterbot-prod
